<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <TargetFramework>net6.0</TargetFramework>
        <RestorePackagesWithLockFile>true</RestorePackagesWithLockFile>
        <RestoreLockedMode Condition="'$(CI)' == 'true'">true</RestoreLockedMode>
        <!--<CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>-->
        <EnableDynamicLoading>true</EnableDynamicLoading>
        <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
        <LangVersion>10</LangVersion>
        <Nullable>enable</Nullable>
        <DisableFastUpToDateCheck>True</DisableFastUpToDateCheck>
        <PathMap>$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory)'))=./</PathMap>
    </PropertyGroup>

    <ItemGroup>
        <PackageReference Include="Microsoft.Extensions.Logging.Abstractions" Version="6.0.0" ExcludeAssets="runtime" />
        <PackageReference Include="NLua" Version="1.6.3" />
        <PackageReference Include="Shoko.Plugin.Abstractions" Version="3.0.0-alpha2" ExcludeAssets="runtime" />
    </ItemGroup>

    <ItemGroup>
        <None Include="lua\**\*.*">
            <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
        </None>
    </ItemGroup>

    <Target Name="UpdateAssemblyInfo" BeforeTargets="BeforeCompile">
        <Exec Command="git describe --match=v[0-9]%2A --tags --abbrev=0 --always" ConsoleToMSBuild="true">
            <Output TaskParameter="ConsoleOutput" PropertyName="GitVerTag" />
        </Exec>
        <Exec Command="git describe --match=v[0-9]%2A --tags --abbrev=7 --always --long --dirty" ConsoleToMSBuild="true">
            <Output TaskParameter="ConsoleOutput" PropertyName="GitInfo" />
        </Exec>
        <ItemGroup>
            <AssemblyAttributes Include="AssemblyVersion">
                <_Parameter1>$([System.Text.RegularExpressions.Regex]::Match("$(GitVerTag)", "\d+\.\d+\.\d+"))</_Parameter1>
            </AssemblyAttributes>
            <AssemblyAttributes Include="AssemblyInformationalVersion">
                <_Parameter1>$(GitInfo)</_Parameter1>
            </AssemblyAttributes>
            <AssemblyAttributes Include="AssemblyProduct">
                <_Parameter1>$(ProjectName)</_Parameter1>
            </AssemblyAttributes>
            <AssemblyAttributes Include="AssemblyTitle">
                <_Parameter1>$(ProjectName)</_Parameter1>
            </AssemblyAttributes>
            <AssemblyAttributes Include="System.Runtime.CompilerServices.InternalsVisibleToAttribute">
                <_Parameter1>LuaRenamerTests</_Parameter1>
            </AssemblyAttributes>
        </ItemGroup>
        <MakeDir Directories="$(IntermediateOutputPath)" />
        <WriteCodeFragment Language="C#" OutputFile="$(GeneratedAssemblyInfoFile)" AssemblyAttributes="@(AssemblyAttributes)" />
        <ItemGroup>
            <Compile Include="$(GeneratedAssemblyInfoFile)" />
        </ItemGroup>
    </Target>

    <Target Name="PackageForRelease" AfterTargets="Publish">
        <PropertyGroup>
            <WinZipDir>$(PublishDir)WinZipDir/</WinZipDir>
            <DockerAmdDir>$(PublishDir)DockerAmdZipDir/</DockerAmdDir>
            <DockerArmDir>$(PublishDir)DockerArmZipDir/</DockerArmDir>
        </PropertyGroup>
        <ItemGroup>
            <SharedOut Include="$(PublishDir)/**/*.*" Exclude="$(PublishDir)/runtimes/**/*.*" />
            <WinOut Include="$(PublishDir)runtimes/win-x64/native/lua54.dll" />
            <DockerAmd64Out Include="$(ProjectDir)docker_build/amd64/liblua54.so" />
            <DockerArm64Out Include="$(ProjectDir)docker_build/arm64/liblua54.so" />
        </ItemGroup>

        <Copy SourceFiles="@(SharedOut);@(WinOut)" DestinationFolder="$(WinZipDir)$(ProjectName)/%(RecursiveDir)" />
        <Copy SourceFiles="@(SharedOut);@(DockerAmd64Out)" DestinationFolder="$(DockerAmdDir)$(ProjectName)/%(RecursiveDir)" />
        <Copy SourceFiles="@(SharedOut);@(DockerArm64Out)" DestinationFolder="$(DockerArmDir)$(ProjectName)/%(RecursiveDir)" />

        <ZipDirectory SourceDirectory="$(WinZipDir)" DestinationFile="$(OutDir)$(ProjectName)_Windows_AMD64_$(GitInfo).zip" Overwrite="true" />
        <ZipDirectory SourceDirectory="$(DockerAmdDir)" DestinationFile="$(OutDir)$(ProjectName)_Docker_AMD64_$(GitInfo).zip" Overwrite="true" />
        <ZipDirectory SourceDirectory="$(DockerArmDir)" DestinationFile="$(OutDir)$(ProjectName)_Docker_ARM64_$(GitInfo).zip" Overwrite="true" />

        <RemoveDir Directories="$(WinZipDir);$(DockerAmdDir);$(DockerArmDir)" />
    </Target>

    <Target Name="Cleaner" AfterTargets="AfterClean">
        <RemoveDir Directories="$(OutDir)" />
    </Target>
</Project>
